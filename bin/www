#!/usr/bin/env node

/**
 * Module dependencies.
 */
const chalk = require("chalk");
const colors = require('colors')
const figlet = require("figlet");
var app = require('../app');
const Spinnies = require('spinnies')
const spinnies = new Spinnies();
var { start, infopd, success, close } = require('./log');
var debug = require('debug')('website-downloader:server');
var http = require('http');
const color = (text, color) => {
  return !color ? chalk.green(text) : chalk.keyword(color)(text);
};
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3300');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
// Pass socket Object to it's modula 
require('../socket/socket')(io)
console.clear()

console.log(color(`[ • APPLICATION RUNNING • ]` ,'cyan'))
console.log(color(`< ================================================== >`, 'cyan'))
console.log(color(`[•]`, 'aqua'), color(`Download all the source code and assets of any website`, 'white'))
console.log(color(`[•]`, 'aqua'), color(`Script Version : 2.0.1`, 'white'))
console.log(color(`[•]`, 'aqua'), color(`Running on port : ${port}`, 'white'))
console.log(color(`[え]`, 'aqua'), color(`Remaked by Ditzzy`, 'white'), color(`[え]`, 'aqua'))
console.log(color(`< ================================================== >`, 'cyan'))
spinnies.add('spinner-1', { text: 'Waiting a future' });
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
